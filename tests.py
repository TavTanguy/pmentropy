import pmentropy
from pm4py.read import read_xes

precision = 5

files = ["./logs/log1.xes", "./logs/log2.xes", "./logs/log3.xes", "./logs/log4.xes"]
values_test = [
    {
    "longest_branch": 8,
    "len_mapping": 8, 
    "end_nodes": ['a/b/c/d/e/f/g', 'b/b/c/d/e/f', 'a/b/c/d/e/f', 'a/b/c/h/e/f', 'a/b/b/c/d/e/f/g', 'a/b/b/c/h/e/f/g', 'a/b/b/c/d/e/f', 'a/b/b/c/h/e/f', 'a/b/c/h/e/f/g'],
    },
    {
    "longest_branch": 8, 
    "len_mapping": 8, 
    "end_nodes": ['a/b/c/d/e/f/g', 'a/b/c/h/e/f/g', 'a/b/c/d/e/f', 'a/b/c/h/e/f', 'a/b/b/c/d/e/f/g', 'a/b/b/c/h/e/f/g', 'a/b/b/c/d/e/f', 'a/b/b/c/h/e/f'],
    },
    {
    "longest_branch": 11, 
    "len_mapping": 8, 
    "end_nodes": ['a/b/a/c/d', 'c/e/a/f/g/e/f/g', 'a/h/h/a/a', 'h/a/c/h/e/a/e/c/f/g', 'b/c/b/c/a', 'h/f/g/c', 'f/g/a/f/g/a/a/a', 'b/c/b/d/b/d/e/a/a/f/g'],
    },
    {
    "longest_branch": 4, 
    "len_mapping": 8,
    "end_nodes": ['a/b/c/d', 'e/b/c/d', 'e/b/d/c', 'f/b/c/d', 'f/b/d/c', 'g/b/c/d', 'g/b/d/c', 'h/b/c/d', 'h/b/d/c', 'a/b/d/c'],
    }
]

trace_entropy_vals = [3.0902410118609205, 2.5477309221191606, 3.0, 3.3219280948873617, 3.169925001442312, 3.0, 3.0, 3.3219280948873617]
prefix_entropy_vals = [4.211964498735216, 3.971209347851657, 5.62878349348618, 4.821928094887362, 4.405809213612682, 4.09306920777189, 5.62878349348618, 4.821928094887362]
b_block_entropy_vals = [2.894094726921078,3.0889055560514063,3.321567270695924,3.3740968067484762,3.2504249097191247,2.9330432935296904,3.0438257196159006,
3.229009701343817,3.3060324769557843,3.083601488048535,2.853957220302278,4.503376105702539,5.103055907333276,5.0,4.584962500721156,2.5804820237218404,
3.025605199016944,3.1609640474436813,3.3219280948873617,0.0,2.8816062390612993,3.088532314010896,3.3131006664157696,3.358592489772478,3.2248809498103124,
2.896291529045928,3.0849625007211556,3.3219280948873617,3.375,3.2516291673878226,2.853957220302278,4.503376105702539,5.1030559073332755,5.0,4.584962500721156,
2.5804820237218404,3.025605199016944,3.1609640474436804,3.3219280948873617,0.0]
global_block_entropy_vals = [5.753566379266527, 5.681511832035923, 7.042658787155613, 4.750699332842307, 5.730066414989514, 5.753720776536187, 7.042658787155613, 4.750699332842307]
kL_entropy_vals = [1.314873324570813,3.5329120597205357,6.162414306936147,8.872154940598891,11.412886281436469,1.1702143121689565,3.243594034916822,5.728437269730579,
8.293518890991466,10.689591219427188,2.777524776827176,6.458214964233264,10.550368663705237,14.722760749624342,18.726143542718287,2.0812930616778074,5.065751533934524,
8.461673518257127,11.937833889026864,15.244984966971435,1.314873324570813,3.5329120597205357,6.162414306936147,8.872154940598891,11.412886281436469,1.1702143121689565,
3.243594034916822,5.728437269730579,8.293518890991466,10.689591219427188,2.777524776827176,6.458214964233264,10.550368663705237,14.722760749624342,18.726143542718287,
2.0812930616778074,5.065751533934524,8.461673518257127,11.937833889026864,15.244984966971435]
kNN_entropy_vals = [1.432656360227197,3.768478131033303,6.515763413905298,0.5091315173647655,1.9214284453084414,3.7451888853180044,0.08843889604899201,1.080043202676894,
2.483111021370684,1.3037457047934793,3.510656820165868,6.129031447604147,0.37051142345748195,1.644188257493874,3.329328603596154,-0.09095091031099369,0.7212635899569225,
1.9449416022907267,2.9110561694516988,6.725277749482309,10.950962841578805,1.9868231368265263,4.8768116842319635,8.178263743703287,1.5613831344960922,4.0259316795710935,
6.901943736711985,2.1866535773356333,5.2764725652501765,8.77775506523061,1.1866535773356333,3.2764725652501765,5.77775506523061,0.6866535773356333,2.276472565250177,
4.2777550652306084,1.432656360227197,3.768478131033303,6.515763413905298,0.5091315173647655,1.9214284453084414,3.7451888853180044,0.08843889604899201,
1.080043202676894,2.483111021370684,1.3037457047934793,3.510656820165868,6.129031447604147,0.37051142345748195,1.644188257493874,3.329328603596154,-0.09095091031099369,
0.7212635899569225,1.9449416022907267,2.9110561694516988,6.725277749482309,10.950962841578805,1.9868231368265263,4.8768116842319635,8.178263743703287,1.5613831344960922,
4.0259316795710935,6.901943736711985,2.1866535773356333,5.2764725652501765,8.77775506523061,1.1866535773356333,3.2764725652501765,5.77775506523061,0.6866535773356333,
2.276472565250177,4.2777550652306084]
lempel_ziv_entropy_rate_vals = [0.667762533534765, 0.5806630726389261, 0.8129283016944965, 0.6115084951819779, 2.2088147603048087, 2.0740553293062876, 2.9036774610288028, 2.128771237954945]
k_block_entropy_rate_diff_vals = [-0.123671897029352, 0.1948108291303292, 0.19481082913032877, 2.894094726921078,0.19481082913032877,-0.22243098890724913,
0.11078242608621114,0.11078242608621114,2.9330432935296904,0.11078242608621114,-0.1030559073332764,0.5996798016307361,1.6494188854002625,1.6494188854002605,
1.6494188854002625,2.5804820237218404,0.4451231752951034,2.5804820237218404,2.5804820237218404,2.5804820237218404,-0.133711539962166,0.20692607494959692,
0.20692607494959692,2.8816062390612993,0.20692607494959692,-0.1233708326121774,0.18867097167522753,0.1886709716752284,2.8962915290459277,0.1886709716752284,
-0.1030559073332764,0.5996798016307361,1.6494188854002605,1.6494188854002625,1.6494188854002614,2.5804820237218404,0.4451231752951034,2.5804820237218404,
2.5804820237218404,2.5804820237218404]
k_block_entropy_rate_ratio_vals = [2.894094726921078,1.5444527780257034,2.894094726921078,2.894094726921078,2.894094726921078,2.9330432935296904,1.5219128598079508,
2.9330432935296904,2.9330432935296904,2.9330432935296904,2.853957220302278,1.25,2.853957220302278,2.853957220302278,2.853957220302278,2.5804820237218404,
1.512802599508472,2.5804820237218404,2.5804820237218404,2.5804820237218404,2.8816062390612993,1.544266157005448,2.8816062390612993,2.8816062390612993,2.8816062390612993,
2.896291529045928,1.5424812503605778,2.8962915290459277,2.896291529045928,2.896291529045928,2.853957220302278,1.25,2.853957220302278,2.853957220302278,2.853957220302278,2.5804820237218404,
1.512802599508472,2.5804820237218404,2.5804820237218404,2.5804820237218404]
uniques_vals = [0.225, 0.2, 0.2, 0.2, 1.0, 1.0, 1.0, 1.0]

logs = [pmentropy.read_file(file) for file in files]
logs_flatten = [pmentropy.read_file(file, flatten=True) for file in files]
logs_all = logs + logs_flatten

def test_read_file():
    for i, t in enumerate(logs_all):
        trie, trie_info = t
        assert trie is not None
        assert trie_info is not None
        assert trie_info["longest_branch"] == values_test[i % len(files)]["longest_branch"]
        assert len(trie_info["mapping"]) == values_test[i % len(files)]["len_mapping"]
        assert list(map(lambda x: x.path, trie_info["end_nodes"])) == values_test[i % len(files)]["end_nodes"]

def test_read_DataFrame():
    for i, path in enumerate(files):
        logs = read_xes(path)
        trie, trie_info = pmentropy.read_DataFrame(logs)
        assert trie is not None
        assert trie_info is not None
        assert trie_info["longest_branch"] == values_test[i % len(files)]["longest_branch"]
        assert len(trie_info["mapping"]) == values_test[i % len(files)]["len_mapping"]
        assert list(map(lambda x: x.path, trie_info["end_nodes"])) == values_test[i % len(files)]["end_nodes"]

def test_trace_entropy():
    for i, t in enumerate(logs_all):
        assert round(pmentropy.trace_entropy(t), precision) == round(trace_entropy_vals[i], precision)

def test_prefix_entropy():
    for i, t in enumerate(logs_all):
        assert round(pmentropy.prefix_entropy(t), precision) == round(prefix_entropy_vals[i], precision)

def test_k_block_entropy():
    for i, t in enumerate(logs_all):
        for k in range(1, 6):
            assert round(pmentropy.k_block_entropy(t, k), precision) == round(b_block_entropy_vals[i*5 + k - 1], precision)

def test_global_block_entropy():
    for i, t in enumerate(logs_all):
        assert round(pmentropy.global_block_entropy(t), precision) == round(global_block_entropy_vals[i], precision)

def test_kL_Entropy():
    for i, t in enumerate(logs_all):
        for p in range(1, 6):
            assert round(pmentropy.kL_entropy(t, p), precision) == round(kL_entropy_vals[i*5 + p - 1], precision)

def test_kNN_Entropy():
    for i, t in enumerate(logs_all):
        for k in range(1, 4):
            for p in range(1, 4):
                assert round(pmentropy.kNN_entropy(t, k, p), precision) == round(kNN_entropy_vals[i*3*3 + (k - 1) * 3 + p - 1], precision)

def test_lempel_ziv_entropy_rate():
    for i, t in enumerate(logs_all):
        assert round(pmentropy.lempel_ziv_entropy_rate(t), precision) == round(lempel_ziv_entropy_rate_vals[i], precision)

def test_k_block_entropy_rate_diff():
    for i, t in enumerate(logs_all):
        for k in range(1, 6):
            res = pmentropy.k_block_entropy_rate_diff(t, k)
            assert round(res[0], precision) == round(k_block_entropy_rate_diff_vals[i*5 + k - 1], precision)

def test_k_block_entropy_rate_ratio():
    for i, t in enumerate(logs_all):
        for k in range(1, 6):
            res = pmentropy.k_block_entropy_rate_ratio(t, k)
            assert round(res[0], precision) == round(k_block_entropy_rate_ratio_vals[i*5 + k - 1], precision)

def test_unique():
    for i, t in enumerate(logs_all):
        assert pmentropy.unique_trace(t) == uniques_vals[i]